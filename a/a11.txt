java高性能
1.并发
	a.基础 
		Java程序运行堆栈分析
		线程状态
		线程终止
		内存屏障和CPU缓存
		线程通信
		线程封闭之ThreadLocal和栈封闭
		线程池应用和实战原理剖析
	b.线程安全之可见性问题
		使用volatile解决可见性问题和阻止指令重排序【volatile修饰的变量具有可见性，在线程修改变量时，会告知其他CPU此变量在缓存中时无效的，这时其他线程读取变量时不会从缓存中查找，而是重新加载内存中的变量值到缓存中】
                ConcurrentHashMap中的get不加锁是因为其Node中的Vlaue和Next都是使用volatile修饰的
		线程安全之共享资源/不可变性/静态条件/临界区
		线程安全之原子操作
		Atomic相关机制和CAS机制
		Java锁相关术语和synchronized关键字详解
		Lock接口和ReentrantLock和ReadWriteLock
		JUC并发包详解
		AQS抽象队列同步器详解
		FutureTask源码剖析
		并发容器类ConcurrentHashMap/ConcurrentSkipListMap
		并发容器类2 ConcurrentSkipListSet/ConcurrentLinkedQueue/CopyOnWriteArrayList/LinkedBlockedQueue
		Fork/Join框架详解
		工具拓展类 信号量/珊拦/倒计时器
2.高并发网络
		a.Java Nio网络编程
		     TCP/UDP协议
			 BIO阻塞式网络编程
			 Nio非阻塞网络变成3大核心理念
		b.Netty框架源码学习	 
			netty线程模型 
			零拷贝机制
			责任链设计模式
		c.网络编程项目实战
			推荐系统功能实现
			系统优化-百万链接
			网易后端开发的netty最佳实践
4.Java系统系能调优
		a.JVM性能篇
			java内存模型详解
			类加载机制
			垃圾回收机制
			JVM内置命令工具
		b.性能调优综合实战
			tomcat网络处理线程模型
			参数调优
			JVM参数及调优
			内存爆炸，CPU100%问题分析、定位、解决
中间件
		1.分布式消息中间件
			a.设计分布式消息中间件
				amqp
				mqtt
				open message
				kafka协议
				持久化设计
				消息分发设计
				高可用设计
				可靠性设计
			b.activeMq
				activeMq入门
				activeMq支持的消息协议
				activeMq高可用集群解决方案
				持久化原理和事物机制
			c.rabbitMq
				rabbitMq入门
				内部消息分发机制
				rabbitMq高可用集群方案
				持久化机制/内存、磁盘控制
				消息可靠性
				插件化机制
			d.kafka
			    kafka入门
				消息持久化
				分片存储机制
				消息分发和消费者push/pull
				kafka Connect数据传输作业工具
				kafka stream架构
				线程模型
				容错机制
				kafka优雅停机
				扩容
				leader选举机制
			f.rocketMq
				rocketMq入门
				rocketMq架构方案和角色详解
				有序消息
				订阅机制
				定时消息
				批量处理
				事物消息详解
				rocketMq中高性能最佳实践(消费者、生产者、JVM、linux最佳配置)
			g.应用场景
				消息中间件监控方案
				异步数据传输场景
				削峰填谷场景
				海量数据同步场景
				分布式事物场景
				网易后端架构中的消息中间件应用
		2.负载均衡中间件
			a.nginx高性能负载均衡
				nginx负载均衡
				代理缓存机制
				通过lua扩展nginx
				高性能nginx最佳实践
				lvs负载均衡软件
				LVS基础概念解析
				基于VIP的keepalived高可用架构详解
				搭建LVS负载均衡集群
			b.基于云计算平台的架构
				使用CDN实现应用的缓存和加速
				通过DNS实现高可靠的负载均衡和访问提速
				网易负载均衡应用
		3.缓存中间件
			a.java内存缓存
				两种缓存方案：分布式缓存和Java内存缓存
				自研Java内存缓存
				谷歌guava提供的缓存
			b.redis分布式缓存
				常用命令
				数据结构
				主从复制
				持久化
				高可用
				集群
				扩容
				内存管理
				集群监控
			c.memcached缓存
				安装使用
				内存管理
				缓存策略
				分布式集群
				分布式算法
			d.缓存架构最佳实践
				大型互联网高并发系统缓存架构方案
				缓存失效
				缓存雪崩解决方案
				缓存穿透
				网易后端架构中缓存方面的设计
		4.数据库中间件
			a.数据库中间件设计
				事物设计
				sql规范
			b.Mycat数据库集群中间件
				mycat入门
				读写分离
				分库分表的场景
				原则
				数据库设计最佳实践
			c.Sharding-jdbc数据库操作增强类库
				基于客户端的读写分离
				分库分表
				柔性事物
				动态切换
			其他中间件介绍
				其他开源产品
容器化技术
		1.Docker容器
			基础概念
			安装
			命令
			运行Java程序
			构建私有镜像
			搭建docker私有仓库
			数据挂载
			Compose集成应用组合
			Service编排
			实践 容器监控
			     日志监控
				 资源管理
				 快速扩容
		2.kubernetes
			k8s 核心概念
				名词讲解
				集群架构方案
				集群环境搭建
				运行docker容器
				搭建k8s高可用集群
				网络方案详解
				内置的负载均衡机制
				自定义CustomResourceDefinition拓展
			实践
				k8s可视化自动自动化工具
				k8s日志收集
				结合k8s的系统整体监控方案
				业务系统部署方案
				k8s探索和实践
分布式系统开发技术
		a.分布式应用协调
			互联网架构演进之路
				集中式单体应用
				系统拆分RPC阶段
				微服务治理阶段
			Zookeeper核心功能和应用场景
				zk入门
				数据模型
				会话机制
				watch机制的应用和原理分析
				详解分布式一致性协议:2pc/3pc/Paxos算法/Raft算法/zab
				用于实现配置中心
				用于实现分布式锁
				实现集群容错
			分布式系统设计重要理论
				CAP
				BASE
				DDD领域模型
				墨菲定律
				康威定律
				业务系统设计原则
		b.RPC服务治理框架
			RPC技术
				概念
				核心3过程
				常见rpc框架
				rpc框架开发
			Dubbo框架原理分析
				dubbo服务化思想
				服务注册与发现机制
				mock机制
				容错机制
				负载均衡机制
				序列化
				配置加载机制
				与spring的集成原理
				数据绑定实现原理
				Rpc协议原理
				Dubbo拓展(链路追踪、日志、回调)
				Dubbo系统监控方案
			SpringCloud微服务解决方案
				Springboot 
					
			
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		